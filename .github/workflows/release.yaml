name: Release Go JWT Issuer

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on new tags (e.g., v1.0.0) for releases

jobs:
  # Job 1: Build and Push Multi-arch Docker Image
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      packages: write # To push Docker images to GitHub Packages (important for GHCR)
      contents: read # Only read permission needed here, as it's not creating release
    outputs:
      build_version: ${{ steps.get_version.outputs.BUILD_VERSION }} # Output version for later use

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU (for multi-arch Docker build)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry (GHCR)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io # Specify GHCR registry
        username: ${{ github.actor }} # Use GitHub actor (your username)
        password: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GITHUB_TOKEN for GHCR auth

    - name: Get tag or short SHA
      id: get_version
      run: |
        # Get the tag name from github.ref, removing "refs/tags/" prefix
        TAG_NAME=$(echo "${{ github.ref }}" | sed 's/^refs\/tags\///')
        echo "BUILD_VERSION=$TAG_NAME" >> $GITHUB_ENV
        echo "BUILD_VERSION=$TAG_NAME" >> "$GITHUB_OUTPUT" # Output for job output

    - name: Build and Push Multi-arch Docker Image to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        # Use github.repository which already includes owner/repo-name
        tags: |
          `ghcr.io/${{ github.repository | lower }}:latest`
          `ghcr.io/${{ github.repository | lower }}:${{ env.BUILD_VERSION }}`
          `ghcr.io/${{ github.repository | lower }}:${{ github.sha }}` # Optionally push with full SHA as well

  # Job 2: Build and Upload Binaries for All Platforms (Matrix) as artifacts
  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: build-docker-image # Ensure docker image build starts before or concurrently
    permissions:
      contents: read # Only read permission needed, we'll upload artifacts

    strategy:
      fail-fast: false # Allow all matrix jobs to complete even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        # Include specific combinations to avoid redundant builds (e.g., darwin/amd64 on ubuntu)
        # Note: macOS runners can build darwin/amd64 and darwin/arm64.
        # Linux runners can build linux/amd64 and linux/arm64.
        # Cross-compiling for macOS on Linux or vice-versa requires more complex toolchains
        # so it's best to build on native OS where possible for host OS targets.
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            asset_name_suffix: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            asset_name_suffix: linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            asset_name_suffix: darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            asset_name_suffix: darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build Binary (${{ matrix.goos }}/${{ matrix.goarch }})
      run: |
        BINARY_NAME="custom-jwt-issuer-${{ matrix.asset_name_suffix }}"
        # For macOS arm64 (Apple Silicon), need to set GOARCH to arm64 and build on macos-latest
        CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $BINARY_NAME .
        echo "Built $BINARY_NAME"
      working-directory: ./

    - name: Upload Binary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: custom-jwt-issuer-${{ matrix.asset_name_suffix }} # Unique name for each artifact
        path: ./custom-jwt-issuer-${{ matrix.asset_name_suffix }}
        # Retention days can be set to save space, default is 90 days.
        retention-days: 7

  # Job 3: Create GitHub Release and Upload Assets
  create-github-release:
    runs-on: ubuntu-latest
    needs: [build-docker-image, build-binaries] # This job depends on both previous jobs finishing
    permissions:
      contents: write # Required to create/update releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Needed for access to RELEASE_BODY.md if you choose to create it

    - name: Download all Binary Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release_assets # All artifacts will be downloaded into this directory

    - name: List Downloaded Artifacts (for debugging)
      run: ls -R ./release_assets

    - name: Generate Release Body
      id: generate_body
      run: |
        RELEASE_TAG="${{ github.ref_name }}" # e.g., v0.0.3
        echo "Automated release for version $RELEASE_TAG." > RELEASE_BODY.md
        echo "" >> RELEASE_BODY.md
        echo "This release includes:" >> RELEASE_BODY.md
        echo "* Multi-architecture Docker images (Linux/amd64, Linux/arm64) pushed to GitHub Container Registry." >> RELEASE_BODY.md
        echo "* CLI binaries for Linux (amd64, arm64) and macOS (amd64, arm64) attached as assets." >> RELEASE_BODY.md
        echo "" >> RELEASE_BODY.md
        echo "For detailed changes, please refer to the commit history." >> RELEASE_BODY.md
      # The shell parameter from your original error is unnecessary here for simple echo commands
      # shell: /usr/bin/bash -e {0} # This line was the root cause of your initial error

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2 # Use v2 for better features and maintenance
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }} # Use the full ref (e.g., refs/tags/v0.0.3)
        name: Release ${{ github.ref_name }} # Use just the tag name (e.g., v0.0.3)
        body_path: RELEASE_BODY.md # Use the file we generated for the release body
        draft: false
        prerelease: false
        # The 'assets' input takes a glob pattern or a list of paths
        assets: ./release_assets/* # Upload all files downloaded into release_assets directory