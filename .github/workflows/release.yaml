name: Release Go JWT Issuer

on:
  push:
    branches:
      - main # Trigger on push to main for development/latest builds
    tags:
      - 'v*.*.*' # Trigger on new tags (e.g., v1.0.0) for releases

jobs:
  # Job 1: Get Version and Create GitHub Release (if tag pushed)
  create-github-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create GitHub Releases
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # Output the upload URL

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag or short SHA
      id: get_version
      run: |
        VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo ${{ github.sha }} | cut -c1-8)
        echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
        # Derive repo name for GHCR tags (github.repository is OWNER/REPO_NAME)
        LOWER_REPO_PATH=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "LOWER_REPO_PATH=$LOWER_REPO_PATH" >> $GITHUB_ENV

    - name: Create GitHub Release (only if tag pushed)
      if: startsWith(github.ref, 'refs/tags/v')
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        body: |
          Automated release for ${{ github.ref }}
          
          Assets include multi-architecture Docker images and CLI binaries.
        draft: false
        prerelease: false
        # generate_release_notes: true # Uncomment to auto-generate release notes

  # Job 2: Build and Push Multi-arch Docker Image (runs in parallel with build-binaries)
  build-docker-image:
    runs-on: ubuntu-latest
    needs: create-github-release # Depends on release being created
    permissions:
      contents: read # Needs read access for checkout
      packages: write # To push Docker images to GitHub Packages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU (for multi-arch Docker build)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry (GHCR)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Multi-arch Docker Image to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ needs.create-github-release.outputs.LOWER_REPO_PATH || env.LOWER_REPO_PATH }}:latest
          ghcr.io/${{ needs.create-github-release.outputs.LOWER_REPO_PATH || env.LOWER_REPO_PATH }}:${{ needs.create-github-release.outputs.BUILD_VERSION || env.BUILD_VERSION }}
          # Note: Fallback env vars needed for push event on 'main' branch that doesn't trigger 'create_release'
        
  # Job 3: Build and Upload Binaries for All Platforms (Matrix, runs in parallel with build-docker-image)
  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: create-github-release # Depends on release being created
    permissions:
      contents: write # To upload assets to the release

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build Binary (${{ matrix.goos }}/${{ matrix.goarch }})
      run: |
        CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o custom-jwt-issuer-${{ matrix.goos }}-${{ matrix.goarch }} .
      working-directory: ./

    - name: Upload Binary Asset (${{ matrix.goos }}/${{ matrix.goarch }})
      if: startsWith(github.ref, 'refs/tags/v') # Only upload if a tag pushed
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-github-release.outputs.upload_url }} # Get URL from create-release job
        asset_path: ./custom-jwt-issuer-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: custom-jwt-issuer-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream
